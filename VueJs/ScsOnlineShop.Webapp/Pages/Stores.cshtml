@page
@model ScsOnlineShop.Webapp.Pages.StoresModel
@section Head {
<script src="~/lib/vue3.global.js"></script>
<style>
    .cheap {
        font-weight: bold;
    }
</style>
}
<div id="app">
    <select class="form-control" v-model="activeStoreGuid">
        <option v-for="s in stores" v-bind:value="s.guid">{{ s.name }} </option>
    </select>
    <div v-if="offers.length">
        <h5>Offers von {{ activeStore.name }} </h5>
        <table class="table table-sm">
            <thead>
                <tr>
                    <th v-on:click="orderBy('productName')">Produkt</th>
                    <th v-on:click="orderBy('price')">Preis</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="o in offers">
                    <td>{{ o.productName }}</td>
                    <td v-bind:class="{price: true, cheap: o.price < 500}">{{ o.price }}</td>
                    <td><a href="javascript:void(0)" v-on:click="deleteOffer(o)">Delete</a></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
@Html.AntiForgeryToken()

<script>
    const token = document.getElementsByName("__RequestVerificationToken")[0].value;
    const app = {
      data: function() {
        return {
          stores: [],
          activeStoreGuid: null,
          sortKey: ""
        }
      },
      mounted: function() {
          fetch("/Stores?handler=all")
            .then(res=>res.json())
            .then(data=> {
                this.stores = data;
            })
      },
      methods: {
          loadOffers: function(store) {
              this.activeStore = store;
          },
          orderBy: function(key) {
              this.sortKey = key;
          },
          deleteOffer: function(offer)
          {
              fetch(`/Stores?handler=offer&offerguid=${offer.guid}`, {
                  method:'DELETE',
                  headers: { 'XSRF-TOKEN': token }
              })
              .then(()=>{
                  const store = this.stores.find(s=>s.guid == this.activeStoreGuid);
                  store.offers = store.offers.filter(o=>o.guid != offer.guid);
              });
          }
      },
      computed:{
          activeStore: function() {
              return this.stores.find(s=>s.guid == this.activeStoreGuid);
          },
          offers: function() {
              if (!this.activeStore) {return [];}
              const store = this.stores.find(s=>s.guid == this.activeStoreGuid);
              if (!store) {return [];}
              return store.offers.sort((a, b) => {
                  if (this.sortKey == "") { return 0; }
                  if (a[this.sortKey] < b[this.sortKey]) { return -1; }
                  if (a[this.sortKey] > b[this.sortKey]) { return 1; }
                  return 0;
              });
          }
        }
    };

    Vue.createApp(app).mount('#app');
</script>
