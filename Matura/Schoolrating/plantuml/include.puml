@startuml
class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IWebHostBuilder
}
class Startup {
    + Startup(configuration:IConfiguration)
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder) : void
}
Startup --> "Configuration" IConfiguration
class WeatherForecast {
    + TemperatureC : int <<get>> <<set>>
    + TemperatureF : int <<get>>
    + Summary : string <<get>> <<set>>
}
WeatherForecast --> "Date" DateTime
class DbContextTests {
    + DbCreationTest() : void
}
class Address {
    + Street : string <<get>> <<set>>
    + Zip : string <<get>> <<set>>
    + City : string <<get>> <<set>>
}
class Name {
    + Title : string <<get>> <<set>>
    + Firstname : string <<get>> <<set>>
    + Lastname : string <<get>> <<set>>
}
class Rating {
    + Id : int <<get>> <<set>>
    + Value : int <<get>> <<set>>
    + RatingUpdated : DateTime? <<get>> <<set>>
}
Rating --> "RatingDate" DateTime
class RatingCategory {
    + Id : int <<get>> <<set>>
    + Name : string <<get>> <<set>>
}
class School {
    + Id : int <<get>> <<set>>
    + SchoolNumber : int <<get>> <<set>>
    + Name : string <<get>> <<internal set>>
    + PupilsCount : int? <<get>> <<set>>
}
class "List`1"<T> {
}
School --> "Address" Address
School --> "SchoolType" SchoolType
School --> "SchoolRatings<SchoolRating>" "List`1"
class SchoolRating {
    + SchoolId : int <<get>> <<set>>
    + RatingCategoryId : int <<get>> <<set>>
}
Rating <|-- SchoolRating
SchoolRating --> "School" School
SchoolRating --> "RatingCategory" SchoolRatingCategory
class SchoolRatingCategory {
}
RatingCategory <|-- SchoolRatingCategory
enum SchoolType {
    VS,
    AHS,
    BHS,
    NMS,
}
class Teacher {
    + Id : int <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + SchoolId : int <<get>> <<set>>
}
class "List`1"<T> {
}
Teacher --> "Name" Name
Teacher --> "School" School
Teacher --> "TeacherRatings<TeacherRating>" "List`1"
class TeacherRating {
    + TeacherId : int <<get>> <<set>>
    + RatingCategoryId : int <<get>> <<set>>
}
Rating <|-- TeacherRating
TeacherRating --> "Teacher" Teacher
TeacherRating --> "RatingCategory" TeacherRatingCategory
class TeacherRatingCategory {
}
RatingCategory <|-- TeacherRatingCategory
class DateTimeExtensions <<static>> {
    + {static} SecondsAccurate(dateTime:DateTime) : DateTime
}
class DbContextExtensions <<static>> {
    + {static} Import(db:DbContext, filename:string) : void
}
class RatingContext {
    + RatingContext(options:DbContextOptions)
    + GetSchoolBySchoolNr(schoolNumber:int) : School
    + GetTeachersBySchool(schoolId:int) : IQueryable<Teacher>
    + GetAverageTeacherRating(teacherId:int, categoryId:int) : decimal
    + GetAverageTeacherRating(teacherId:int, categoryId:int, ratedFrom:DateTime) : decimal
    + Seed() : void
}
class "DbSet`1"<T> {
}
DbContext <|-- RatingContext
RatingContext --> "Schools<School>" "DbSet`1"
RatingContext --> "Ratings<Rating>" "DbSet`1"
RatingContext --> "RatingCategories<RatingCategory>" "DbSet`1"
RatingContext --> "SchoolRatings<SchoolRating>" "DbSet`1"
RatingContext --> "SchoolRatingCategories<SchoolRatingCategory>" "DbSet`1"
RatingContext --> "Teachers<Teacher>" "DbSet`1"
RatingContext --> "TeacherRatings<TeacherRating>" "DbSet`1"
RatingContext --> "TeacherRatingCategories<TeacherRatingCategory>" "DbSet`1"
class RatingService {
    + RatingService(db:RatingContext)
    + InsertTeacherRating(teacherId:int, ratingDtos:IEnumerable<RatingDto>) : void
    + InsertSchoolRating(schoolId:int, ratingDtos:IEnumerable<RatingDto>) : void
    + GetSchoolStatistics(schoolId:int) : SchoolStat
}
class RatingDto {
    + CategoryId : int <<get>> <<set>>
    + Value : int <<get>> <<set>>
}
class SchoolStat {
    + SchoolNumber : int <<get>> <<set>>
}
class Category {
    + Name : string <<get>> <<set>>
    + AvgValue : decimal <<get>> <<set>>
}
class "List`1"<T> {
}
RatingService +-- RatingDto
RatingService +-- SchoolStat
SchoolStat --> "Categories<Category>" "List`1"
SchoolStat +-- Category
class TestController {
    + TestController(service:RatingService, db:RatingContext)
    + GetSchoolStatistics(schoolId:int) : IActionResult
    + GetSchoolBySchoolNr(schoolNumber:int) : IActionResult
    + GetTeachersBySchool(schoolId:int) : IActionResult
    + GetAverageTeacherRating(teacherId:int, categoryId:int) : IActionResult
    + GetAverageTeacherRating(teacherId:int, categoryId:int, ratedFrom:DateTime) : IActionResult
}
ControllerBase <|-- TestController
class AutoGeneratedProgram {
    {static} Main(args:string[]) : void
}
@enduml
